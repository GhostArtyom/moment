classdef ImportedScenario < MTKScenario
%IMPORTEDSCENARIO Scenario for manually input moment matrices.
% 
% Unlike the other scenarios, moment and localizing matrices are not 
% generated automatically, as no fundamental operators are defined by
% this scenario. Instead, matrices can be registered and added using 
% the ImportMatrix method. 
%
% This allow for Moment functionality, such as the generation of bases
% for use with solvers, with moment matrices generated by other
% means.

% EXAMPLES:
%       /examples/imported_matrices.m
%    
    properties(GetAccess = public, SetAccess = protected)
        Real % True if every definable symbol in the system is real.
    end
        
    %% Construction and initialization
    methods
        function obj = ImportedScenario(varargin)
        % IMPORTEDSCENARIO Construct an empty scenario, ready for import.
        %
        % PARAMS
        %   all_real - True if every definable symbol in the system is real.
        %
        
            % Default parameters
            all_real = false;
        
            % Validate parameters
            options = Util.check_varargin_keys(...
                        ["all_real", "zero_tolerance"], varargin);
            prune_mask = false(size(options));
            for o = 1:2:numel(options)
                switch options{o}
                    case "all_real"
                        prune_mask(o) = true;
                        prune_mask(o+1) = true;
                        all_real = logical(options{o+1});
                end
            end
            
            % Remove processed parameters, and add new ones
            if any(prune_mask)
                options = options(~prune_mask);
            end                        
            options = [options, {"defines_operators"}, false];
            
            % Superclass c'tor
            obj = obj@MTKScenario(options{:});
            
            % Set whether all symbols are real or not
            obj.Real = all_real;
        end
    end
    
    %% Virtual methods
    methods(Access={?MTKScenario,?MTKMatrixSystem})        
        function ref_id = createNewMatrixSystem(obj)
        % CREATENEWMATRIXSYSTEM Invoke mtk to create imported matrix system.
            cell_args = cell.empty;
            if obj.Real
                cell_args{end+1} = 'real';
            end
            
            ref_id = mtk('imported_matrix_system', cell_args{:});
        end
    end
    
    methods(Access=protected)
        function val = operatorCount(obj)
            error(MTKScenario.err_no_ops, class(obj));
        end
    end
    
    %% Input methods
    methods
        function val = ImportMatrix(obj, input, matrix_type)
        % IMPORTMATRIX Incorporate symbolic matrix into matrix system.
        %
        % Any symbols that appear in previously imported matrices share the
        % same meaning. If the matrix_type specified forces the imaginary
        % (or real) part of a symbol to be zero, then this constraint is 
        % imposed everywhere the symbol appears. If, to be consistent, with
        % all the matrices it appears in, a symbol must be zero (and the
        % symbol is not itself "0"), then an error is raised.
        %
        % In particular, when matrix_type "hermitian" is selected, diagonal
        % elements will be interpretted as real-valued. Likewise, if
        % off-diagonal element at (i,j) and (j,i) are both set to X, then X
        % will be inferred to be real (to keep X complex, instead set (j,i)
        % to "X*").
        %
        % When matrix_type is "symmetric", the function expects (i,j)=(j,i) 
        % and will throw an error otherwise. It is recommended not to use 
        % "symmetric" with complex matrices, as this imposes the constraint 
        % M = transpose(M), as opposed to M = ctranspose(M).
        %
        % PARAMS
        %   input - The square matrix to import. Can be integer, numeric or
        %           string. Conjugation should be represented as string 
        %           "5*". Negation as either -5 or "-5".
        %   matrix_type - Symmetry constraints, and symbol types of the
        %                 matrix. Must be one of "real", "complex",
        %                 "symmetric" or "hermitian". 
        %
        % RETURNS
        %   An OpMatrix.OperatorMatrix, containing a handle to the newly
        %   imported matrix.
        %
        % See also: OpMatrix.OperatorMatrix
        
            
            % Validate input
            if nargin < 2
               error("A matrix must be supplied as input.");
            end
            if ~ismatrix(input)
                error("Input must be a matrix");
            end
            [dimension, other_dimension] = size(input);
            if other_dimension ~= dimension
                error("Input must be a square matrix.");
            end
            
            % Validate matrix type                       
            if nargin >= 3
                matrix_type = lower(char(matrix_type));
                if ~ismember(matrix_type, ...
                            {'real', 'complex', 'symmetric', 'hermitian'})
                    error("Matrix type must be real, complex, symmetric or hermitian.");
                end
                t_args = {matrix_type};
            else
                t_args  = cell.empty;
            end
            
            % Do import
            [index, dim, is_mono, is_herm] = ...
                mtk('import_matrix', obj.System.RefId, input, t_args{:});

            assert(dim == dimension);
            val = MTKOpMatrix(obj, index, dimension, is_mono, is_herm);
            
            % Update symbols, with forced reset
            obj.System.UpdateSymbolTable(true);
        end
        
        function val = ImportSymmetricMatrix(obj, input)
        % IMPORTSYMMETRICMATRIX Alias for ImportMatrix with matrix_type set to 'symmetric'.
        %
        % See also: IMPORTMATRIX
            val = obj.ImportMatrix(input, 'symmetric');
        end
        
        function val = ImportHermitianMatrix(obj, input)
        % IMPORTSYMMETRICMATRIX Alias for ImportMatrix with matrix_type set to 'hermitian'.
        %
        % See also: IMPORTMATRIX
            val = obj.ImportMatrix(input, 'hermitian');
        end
        
        function val = MomentMatrix(obj, level)
            error("Imported scenarios cannot create moment matrices.");
        end
    end    
end

